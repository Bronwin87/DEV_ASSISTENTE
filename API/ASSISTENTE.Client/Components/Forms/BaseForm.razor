@using ASSISTENTE.Client.Common.Models
@using ASSISTENTE.Contract.Internal

@typeparam TRequest where TRequest : IRequest
@typeparam TResponse

<EditForm TModel="TRequest" EditContext="@_editContext" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
    <MudGrid>
        <MudItem xs="12" sm="12">
            <DataAnnotationsValidator/>
            <MudCard>
                <MudCardContent>
                    @FormFields
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Secondary"
                               Disabled="@(_isLoading)">
                        @(_isLoading ? "Generating..." : "Generate answer")
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        @if (_showErrors && !_isLoading)
        {
            <MudItem xs="12" sm="12">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.subtitle2">Errors</MudText>
                    <MudText Color="@Color.Error">
                        <ValidationSummary/>
                    </MudText>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</EditForm>

@code {

    [Parameter] public required RenderFragment FormFields { get; set; }

    [Parameter] public required Func<TRequest, Task<HttpResult<TResponse>>> SubmitMethod { get; set; }
    [Parameter] public required EventCallback<TResponse?> OnResponseUpdated { get; set; }
    [Parameter] public required EventCallback<TRequest> OnRequestClear { get; set; }

    [Parameter] public required TRequest Request { get; set; }
    [Parameter] public required TResponse? Response { get; set; }

    bool _isLoading;
    bool _showErrors;

    readonly GeneralError _generalError = new();
    ValidationMessageStore _messageStore = null!;
    EditContext _editContext = null!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Request!);
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private async Task ClearResponse()
    {
        Response = default;
        await OnResponseUpdated.InvokeAsync(Response);
    }

    private async Task OnValidSubmit(EditContext context)
    {
        _showErrors = false;
        _isLoading = true;

        await ClearResponse();

        var response = await SubmitMethod(Request);

        if (response.IsSuccess)
        {
            Response = response.Content;
            Request.Clear();

            await OnResponseUpdated.InvokeAsync(Response);
            await OnRequestClear.InvokeAsync(Request);
        }
        else
        {
            foreach (var error in response.ErrorDetails!.Errors)
            {
                _messageStore.Add(() => _generalError.Error, error.Value);
            }

            _showErrors = true;

            _editContext.NotifyValidationStateChanged();
        }

        _isLoading = false;

        StateHasChanged();

        _messageStore.Clear();
    }

    private async Task OnInvalidSubmit(EditContext context)
    {
        _messageStore.Clear();
        
        _showErrors = true;
        
        await ClearResponse();

        StateHasChanged();
    }

}