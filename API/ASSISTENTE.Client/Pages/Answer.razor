@page "/answer"

@using ASSISTENTE.Client.Brokers
@using ASSISTENTE.Client.Common.Models
@using ASSISTENTE.Client.Components.Forms
@using ASSISTENTE.Contract.Internal.Knowledge.Queries.Answer

@inject IAnswersBroker AnswersBroker

<PageTitle>Ask question</PageTitle>

@if (_response != null)
{
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudPaper Class="pa-4">
                @_response.Text
            </MudPaper>
        </MudItem>
    </MudGrid>
}

<BaseForm TRequest="AnswerRequest"
          TResponse="AnswerResponse"
          Request="_request"
          Response="_response"
          SubmitMethod="GenerateAnswerAsync"
          OnStateUpdated="HandleStateUpdate">

    <FormFields>
        <MudTextField
            @bind-Value="_request.Question"
            For="@(() => _request.Question)"
            HelperText="Ask random question"
            Variant="Variant.Outlined"
            T="string"
            Label="Question"
            Lines="10"
            Required="true"
            RequiredError="Question name is required!"/>
    </FormFields>

</BaseForm>

@code {

    readonly AnswerRequest _request = new();
    AnswerResponse? _response;

    private async Task<HttpResult<AnswerResponse>> GenerateAnswerAsync(AnswerRequest request) =>
        await AnswersBroker.GenerateAnswerAsync(request);

    private void HandleStateUpdate(AnswerResponse? response) => _response = response;
}