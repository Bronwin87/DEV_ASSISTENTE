@page "/questions/ask"

@implements IAsyncDisposable

@using ASSISTENTE.Contract.Requests.Internal.Questions.Commands.CreateQuestion
@using ASSISTENTE.Contract.Requests.Internal.Questions.Queries.GetAnswer
@using ASSISTENTE.Language.Enums
@using ASSISTENTE.Language.Identifiers
@using ASSISTENTE.UI.Brokers.Implementations
@using ASSISTENTE.UI.Common.Models
@using ASSISTENTE.UI.Components.Forms
@using ASSISTENTE.UI.Components
@using ASSISTENTE.UI.Components.ProgressBars
@using Microsoft.AspNetCore.SignalR.Client

@inject IAnswersBroker AnswersBroker
@inject IQuestionsBroker QuestionsBroker
@inject HubConnection HubConnection

<PageTitle>Ask question</PageTitle>

@if (_inProgress)
{
    <QuestionProgressBar Progress="_questionProgresses"/>
}

@if (_response != null)
{
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MarkdownArea Content="@_response.Text"/>
        </MudItem>
    </MudGrid>
}

@if (_connectionInitialization)
{
    <p>Initialization connection - please wait...</p>
}
else
{
    <BaseForm TRequest="CreateQuestionRequest"
              Request="_request"
              IsDisabled="_inProgress"
              SubmitMethod="CreateQuestionAsync"
              OnRequestClear="HandleRequestUpdate"
              OnSuccessSubmit="HandleOnSubmit">

        <FormFields>
            <MudTextField
                @bind-Value="_request.Question"
                For="@(() => _request.Question)"
                HelperText="Ask random question"
                Variant="Variant.Outlined"
                T="string"
                Label="Question"
                Lines="10"
                Required="true"
                Disabled="@_inProgress"
                RequiredError="Question name is required!"/>
        </FormFields>
    </BaseForm>
}


@code {

    private bool _inProgress;
    private bool _connectionInitialization = true;

    private readonly List<QuestionProgress> _questionProgresses = [];

    CreateQuestionRequest _request = new();
    GetAnswerResponse? _response;

    private async Task<HttpResult> CreateQuestionAsync(CreateQuestionRequest request) =>
        await QuestionsBroker.CreateQuestionAsync(request);

    private void HandleRequestUpdate(CreateQuestionRequest request) => _request = request;

    private void HandleOnSubmit()
    {
        _questionProgresses.Clear();
        _response = null;
        _inProgress = true;
    }

    protected override async Task OnInitializedAsync()
    {
        HubConnection.On<string>("InitConnection", connectionId =>
        {
            _request.ConnectionId = connectionId;
            _connectionInitialization = false;

            InvokeAsync(StateHasChanged);
        });

        HubConnection.On<QuestionProgress>("ReceiveProgress", questionProgress =>
        {
            _questionProgresses.Add(questionProgress);

            InvokeAsync(StateHasChanged);
        });

        HubConnection.On<QuestionId>("NotifyReadiness", async questionId =>
        {
            var response = await AnswersBroker.GetAnswerAsync(GetAnswerRequest.Create(questionId));

            if (response.IsSuccess)
            {
                _response = response.Content;
            }

            _inProgress = false;

            await InvokeAsync(StateHasChanged);
        });

        if (HubConnection.State == HubConnectionState.Disconnected)
            await HubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection == null) return;
        if (HubConnection.State != HubConnectionState.Connected) return;
        
        await HubConnection.StopAsync();
    }

}